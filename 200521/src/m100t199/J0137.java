package m100t199;

public class J0137 {
    /**
     * 要计数某个数字出现次数, 我们可以换一种思路:
     * 计数每个二进制位出现次数
     * 如果这道题是其余元素恰好出现两次
     * 那么我们只需要对每个 bit 位异或运算即可, 异或两次会变成 0
     * 但是这道题有需要出现三次, 因此我们就用两个二进制串去实现即可
     * 列出真值表, 并根据当前的数进行状态转移, 最后返回低位即可
     *
     * 设 a 为低位, b 为高位, aa 为变化后的高位, bb 为变化后的低位
     * 我们定义 (ab) 的三种状态依次是 (00),(01),(11)
     *
     * 那么如果当前位是 0, 我们不需要进行状态转移:
     *  a   b   c   aa  bb
     *  0   0   0   0   0
     *  0   1   0   0   1
     *  1   1   0   1   0
     *
     * 如果当前位是 1, 进行状态转移:
     *  a   b   c   aa  bb
     *  0   0   1   0   1
     *  0   1   1   1   1
     *  1   1   1   0   0
     *
     * 根据上面两个表可以易得状态转移方程:
     * aa = (~b & c) | (a & ~c)
     * bb = a & ( b ^ c )
     * */
    public int singleNumber(int[] nums) {
        int a=0,b=0,t;
        for (int c:nums) {
            t=a;
            a=(~b&c)|(a&~c);
            b=t&(b^c);
        }
        return a;
    }
}
